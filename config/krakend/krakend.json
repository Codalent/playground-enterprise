{
  "$schema": "https://www.krakend.io/schema/v3.json",
  "version": 3,
  "name": "KrakenD Enterprise API Gateway",
  "port": 8080,
  "host": ["http://fake_api:8080"],
  "timeout": "3000ms",
  "cache_ttl": "300s",
  "debug_endpoint": true,
  "plugin": {
    "pattern": ".so",
    "folder": "/opt/krakend/plugins/"
  },
  "endpoints": [
    {
      "@comment": "Feature: Aggregation + Basic transformation (filtering & mapping) + grouping",
      "endpoint": "/git/{user}",
      "backend": [
        {
          "host": ["https://api.github.com"],
          "url_pattern": "/users/{user}",
          "allow": [
            "avatar_url",
            "name",
            "company",
            "blog",
            "location",
            "mail",
            "hireable",
            "followers",
            "public_repos",
            "public_gists"
          ],
          "mapping": {
            "blog": "website"
          },
          "group": "user"
        },
        {
          "host": ["https://api.github.com"],
          "url_pattern": "/users/{user}/repos",
          "mapping": {
            "collection": "repos"
          },
          "is_collection": true
        }
      ],
      "extra_config": {
        "documentation/openapi": {
          "summary": "Merges two calls from github and serves under a single endpoint",
          "description": "This endpoint fetches in parallel the user information and the repository information from Githuib and returns it together. Non interesting fields are removed.",
          "tags": [
            "Aggregation"
          ]
        }
      }
    },
    {
      "@comment": "Feature: One-liner advanced data manipulation (filter, sorting & remapping) with JMESPath Query Language",
      "endpoint": "/cryptos/{currency}",
      "output_encoding": "json-collection",
      "backend": [
        {
          "host": ["https://api.coingecko.com"],
          "url_pattern": "/api/v3/coins/markets?vs_currency={currency}&order=market_cap_desc&per_page=100&page=1&sparkline=false",
          "encoding": "safejson"
        }
      ],
      "extra_config": {
        "modifier/jmespath": {
          "@comment": "Get first 5 crypto by market capitalization, then reverse sort them by name, finally filter and rename some fields",
          "expr": "reverse(sort_by(collection[:5], &name))[*].{name: name, token: symbol,price: current_price, price_change: price_change_percentage_24h, market_cap: market_cap}"
        },
        "documentation/openapi": {
          "summary": "Get TOP 5 crypto capitalization & price data for a given currency",
          "description": "This endpoint fetches some crypto capitalization data from Coingecko for a given currency.",
          "tags": [
            "Aggregation"
          ]
        }
      }
    },
    {
      "@comment": "Feature: Regular expression manipulation",
      "endpoint": "/user/creditcard",
      "backend": [
        {
          "url_pattern": "/user/1.json",
          "allow": ["credit_card"],
            "extra_config": {
                "plugin/req-resp-modifier": {
                "name": ["content-replacer"],
                "content-replacer": {
                  "credit_card.number": {
                    "@comment": "Ridiculous card masking. Show last 4 digits and remove the rest. Credit card number is nested.",
                    "find": "^.*(\\d{4})",
                    "replace": "XXXX-${1}",
                    "regexp": true
                  }
                }
            }
          }
        }
      ]
    },
    {
      "@comment": "Feature: Security policy engine for requests, responses and claim checking",
      "endpoint": "/track-user",
      "@test_with": "curl -iG -H'Cookie: GDPR=yes' 'http://localhost:8080/track-user'",
      "input_headers": [
        "Cookie"
      ],
      "backend": [
        {
          "host": ["http://localhost:8080"],
          "url_pattern": "/__debug/cookie"
        }
      ],
      "extra_config": {
        "security/policies": {
          "req": {
            "policies": [
              "getCookie('GDPR') == 'yes'"
            ],
            "error": {
              "body": "User did not accept the cookie and tracking is not allowed",
              "status": 403
            }
          }
        }
      }
    },
    {
      "@comment": "Feature: Aggregation + backend rate limiting + endpoint rate limiting",
      "endpoint": "/shop",
      "backend": [
        {
          "url_pattern": "/shop/campaigns.json",
          "allow": [ "campaigns" ]
        },
        {
          "url_pattern": "/shop/products.json",
          "allow": [ "products" ],
          "extra_config": {
            "qos/ratelimit/proxy": {
              "max_rate": 1,
              "capacity": 1
            }
          }
        }
      ],
      "extra_config": {
        "qos/ratelimit/router": {
          "max_rate": 2
        }
      }
    },
    {
      "@comment": "Feature: Backend cache",
      "endpoint": "/market/cached",
      "backend": [
        {
          "host": ["https://api.coingecko.com"],
          "url_pattern": "/api/v3/coins/markets?vs_currency=eur&ids=bitcoin%2Cethereum&order=market_cap_desc&per_page=100&page=1&sparkline=false",
          "encoding": "safejson",
          "mapping": {
            "collection": "coins"
          },
          "extra_config": {
            "qos/http-cache": {
              "shared": true
            }
          }
        }
      ]
    },
    {
      "@comment": "Feature: Concurrent calls - Not enabled",
      "endpoint": "/market/simple",
      "backend": [
        {
          "host": ["https://api.coingecko.com"],
          "url_pattern": "/api/v3/coins/markets?vs_currency=eur&ids=bitcoin%2Cethereum&order=market_cap_desc&per_page=100&page=1&sparkline=false",
          "encoding": "safejson",
          "mapping": {
            "collection": "coins"
          }
        }
      ],
      "extra_config": {
        "documentation/openapi": {
          "summary": "Get crypto market information with a single call",
          "description": "This endpoint fetches crypto market information from Coingecko using a single non-concurrent call.",
          "tags": [
            "Concurrent calls"
          ]
        }
      }
    },
    {
      "@comment": "Feature: Concurrent calls - Enabled",
      "endpoint": "/market/concurrent",
      "concurrent_calls": 3,
      "backend": [
        {
          "host": ["https://api.coingecko.com"],
          "url_pattern": "/api/v3/coins/markets?vs_currency=eur&ids=bitcoin%2Cethereum&order=market_cap_desc&per_page=100&page=1&sparkline=false",
          "encoding": "safejson",
          "mapping": {
            "collection": "coins"
          }
        }
      ],
      "extra_config": {
        "documentation/openapi": {
          "summary": "Get crypto market information with 3 concurrent calls",
          "description": "This endpoint fetches crypto market information from Coingecko using 3 concurrent calls.",
          "tags": [
            "Concurrent calls"
          ]
        }
      }
    },
    {
      "@comment": "Feature: Sequential calls, using values from 1st call response into 2nd call request",
      "endpoint": "/sequential",
      "backend": [
        {
          "url_pattern": "/hotels/1.json",
          "allow": [ "destination_id" ]
        },
        {
          "url_pattern": "/destinations/{resp0_destination_id}.json"
        }
      ],
      "extra_config": {
        "proxy": {
          "sequential": true
        }
      }
    },
    {
      "@comment": "Feature: A failing request from a non-existent backend",
      "endpoint": "/fail",
      "backend": [
        {
          "url_pattern": "/user/1.json",
          "group": "user"
        },
        {
          "host": [ "http://fake_url_that_should_not_resolve.tld" ],
          "url_pattern": "/",
          "group": "none"
        }
      ]
    },
    {
      "@comment": "Feature: Expose a GET REST endpoint from POST to SOAP service",
      "endpoint": "/countries-list",
      "backend": [
        {
          "host": ["http://webservices.oorsprong.org"],
          "url_pattern": "/websamples.countryinfo/CountryInfoService.wso",
          "encoding": "xml",
          "method": "POST",
          "target": "Envelope.Body.ListOfLanguagesByNameResponse.ListOfLanguagesByNameResult",
          "mapping": {
            "tLanguage": "languages"
          },
          "extra_config": {
            "modifier/martian": {
              "body.Modifier": {
                "scope": ["request"],
                "contentType": "text/xml; charset=utf-8",
                "@comment": "The body should be base64-encoded",
                "body": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPHNvYXA6RW52ZWxvcGUgeG1sbnM6c29hcD0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iPgogIDxzb2FwOkJvZHk+CiAgICA8TGlzdE9mTGFuZ3VhZ2VzQnlOYW1lIHhtbG5zPSJodHRwOi8vd3d3Lm9vcnNwcm9uZy5vcmcvd2Vic2FtcGxlcy5jb3VudHJ5aW5mbyI+CiAgICA8L0xpc3RPZkxhbmd1YWdlc0J5TmFtZT4KICA8L3NvYXA6Qm9keT4KPC9zb2FwOkVudmVsb3BlPg=="
              }
            },
            "plugin/http-client": {
              "name": "http-logger",
              "path": "/tmp/krakend-http-logger",
              "file_prefix": "soap"
            }
          }
        }
      ]
    },
    {
      "@comment": "EE only feature: Wildcard to our fake API, open",
      "endpoint": "/__wildcard/fake-api",
      "input_headers": [
        "X-Krakend-Wildcard"
      ],
      "backend": [
        {
          "url_pattern": "/",
          "extra_config": {
            "plugin/http-client": {
              "name": "wildcard"
            }
          }
        }
      ],
      "extra_config": {
        "documentation/openapi": {
          "summary": "Calls to internal service with wildcard",
          "description": "This endpoint will send all requests to a designed backend including everything after the /fake-api path",
          "tags": [
            "Wildcard"
          ]
        }
      }
    },
    {
      "@comment": "EE only feature: Wildcard to our fake API, protected with Basic Auth",
      "endpoint": "/__wildcard/fake-api-auth",
      "input_headers": [
        "X-Krakend-Wildcard"
      ],
      "backend": [
        {
          "url_pattern": "/",
          "extra_config": {
            "plugin/http-client": {
              "name": "wildcard"
            }
          }
        }
      ],
      "extra_config": {
        "documentation/openapi": {
          "summary": "Calls to internal service with wildcard, adding auth",
          "description": "This endpoint will send all requests to a designed backend including everything after the /fake-api-auth path, adding Basic Authentication",
          "tags": [
            "Wildcard"
          ]
        }
      }
    },
    {
      "@comment": "EE only feature: Wildcard with geofencing - Allow visits only from Spain",
      "endpoint": "/__wildcard/fake-api-geofence",
      "input_headers": [
        "X-Krakend-Wildcard",
        "X-Geoip"
      ],
      "backend": [
        {
          "url_pattern": "/",
          "extra_config": {
            "plugin/http-client": {
              "name": "wildcard"
            }
          }
        }
      ],
      "extra_config": {
        "validation/cel": [
          {
            "check_expr": "req_headers['X-Geoip'][0].matches('\"IsoCode\":\"ES\"')"
          }
        ],
        "documentation/openapi": {
          "summary": "Calls to internal service with wildcard, using geofencing",
          "description": "This endpoint will send all requests to a designed backend including everything after the /fake-api-geofence path, adding geofencing (allowing calls only from Spain)",
          "tags": [
            "Wildcard"
          ]
        }
      }
    },
    {
      "@comment": "EE only feature: Dynamic routing based on headers (token claim and cookie also available)",
      "endpoint": "/dynamic/header",
      "backend": [
        {
          "@comment": "We will route to the backend using the content of the 'X-Route' header",
          "@test_with": "curl -iG -H 'X-Route: hello' 'http://localhost:8080/dynamic/header'",
          "host": ["http://localhost:8080"],
          "url_pattern": "/__debug/{input_headers.x-route}"
        }
      ]
    },
    {
      "@comment": "EE only feature: Dynamic routing based on query strings",
      "endpoint": "/dynamic/qs",
      "backend": [
        {
          "@comment": "We will route to the backend using the content of the 'X-Route' header",
          "@test_with": "curl -iG 'http://localhost:8080/dynamic/qs?route=hello'",
          "host": ["http://localhost:8080"],
          "url_pattern": "/__debug/{input_query_strings.route}"
        }
      ]
    },
    {
      "@comment": "Feature: A public endpoint that requires no authentication",
      "endpoint": "/public",
      "backend": [
        {
          "url_pattern": "/hotels/1.json"
        }
      ]
    },
    {
      "@comment": "Feature: Authorization based on JWT (using Auth0)",
      "endpoint": "/private/auth0",
      "backend": [
        {
          "url_pattern": "/user/1.json"
        }
      ],
      "extra_config": {
        "auth/validator": {
          "alg": "RS256",
          "audience": ["http://api.example.com"],
          "roles_key": "http://api.example.com/custom/roles",
          "roles": ["user", "admin"],
          "jwk_url": "https://albert-test.auth0.com/.well-known/jwks.json"
        },
        "documentation/openapi": {
          "summary": "Some information behind JWT authentication protection (Auth0)",
          "description": "This endpoint uses JWT authentication with Auth0",
          "tags": [
            "Authentication"
          ]
        }
      }
    },
    {
      "@comment": "Feature: Authorization based on JWT (using KrakenD JOSE signer)",
      "endpoint": "/private/custom",
      "backend": [
        {
          "url_pattern": "/user/1.json"
        }
      ],
      "extra_config": {
        "auth/validator": {
          "alg": "HS256",
          "audience": ["http://api.example.com"],
          "roles_key": "roles",
          "issuer": "https://krakend.io",
          "roles": ["role_a", "role_c"],
          "jwk_url": "http://fake_api:8080/jwk/symmetric.json",
          "disable_jwk_security": true
        }
      }
    },
    {
      "@comment": "Feature: JWT signing, as described at https://www.krakend.io/docs/authorization/jwt-signing/",
      "endpoint": "/token",
      "backend": [
        {
          "url_pattern": "/token.json"
        }
      ],
      "extra_config": {
        "auth/signer": {
          "alg": "HS256",
          "kid": "sim2",
          "keys_to_sign": ["access_token", "refresh_token"],
          "jwk_url": "http://fake_api:8080/jwk/symmetric.json",
          "disable_jwk_security": true
        }
      }
    },
    {
      "@comment": "EE only feature: Authorization based on API Keys",
      "endpoint": "/api-key",
      "backend": [
        {
          "url_pattern": "/__debug/admin",
          "host": [
            "http://localhost:8080"
          ]
        }
      ],
      "extra_config": {
        "auth/api-keys": {
          "roles": ["admin"]
        },
        "documentation/openapi": {
          "summary": "Some information behind API-Keys authentication protection",
          "description": "This endpoint uses API-Key authentication",
          "tags": [
            "Authentication"
          ]
        }
      }
    },
    {
      "@comment": "Feature: Only POST method allowed",
      "endpoint": "/post",
      "method": "POST",
      "backend": [
        {
          "url_pattern": "/__debug/post"
        }
      ]
    },
    {
      "@comment": "Feature: Mocked response",
      "endpoint": "/mocked-response",
      "method": "GET",
      "output_encoding": "json",
      "backend": [{"host": ["http://unexistent_backend"], "url_pattern": "/"}],
      "extra_config": {
        "proxy": {
          "static": {
            "data": {
              "an_integer": 123,
              "an_array": [
                "arr1",
                "arr2"
              ],
              "an_object": {
                "obj": "obj1"
              }
            },
            "strategy": "always"
          }
        }
      }
    }
  ],
  "sequential_start": true,
  "async_agent": [
    {
      "name": "async-agent-demo",
      "backend": [
        {
          "host":[ "http://127.0.0.1:8080" ],
          "url_pattern": "/__debug/async-agent-demo",
          "method": "POST"
        }
      ],
      "consumer": {
        "topic": "*.bar",
        "workers": 20
      },
      "connection": {
        "max_retries": 10,
        "backoff_strategy": "exponential-jitter"
      },
      "extra_config": {
        "async/amqp": {
          "name": "krakend",
          "host": "amqp://guest:guest@rabbitmq:5672/",
          "exchange": "foo",
          "prefetch_count": 40,
          "auto_ack": true
        }
      }
    }
  ],
  "extra_config": {
    "router": {
      "return_error_msg": true
    },
    "plugin/http-server": {
      "name": [
        "static-filesystem",
        "basic-auth",
        "wildcard",
        "geoip",
        "url-rewrite"
      ],
      "static-filesystem": {
        "prefix": "/demo/",
        "path": "/etc/krakend/demo/"
      },
      "basic-auth": {
        "htpasswd_path": "/etc/krakend/.htpasswd",
        "endpoints": [
          "/__wildcard/fake-api-auth"
        ]
      },
      "wildcard": {
        "endpoints": {
          "/__wildcard/fake-api": [
            "/fake-api"
          ],
          "/__wildcard/fake-api-auth": [
            "/fake-api-auth"
          ],
          "/__wildcard/fake-api-geofence": [
            "/fake-api-geofence"
          ]
        }
      },
      "geoip": {
        "citydb_path": "/etc/krakend/geoip/GeoLite2-City.mmdb"
      },
      "url-rewrite": {
        "literal": {
          "/git-profile": "/git"
        },
        "regexp": [
          [
            "/git-profile/([a-z]{3})",
            "/git/${1}"
          ],
          [
            "/crypto-profile/([a-z]{3})",
            "/cryptos/${1}"
          ]
        ]
      }
    },
    "documentation/openapi": {
      "version": "1",
      "contact_name": "John Doe",
      "contact_email": "contact@example.com",
      "license_name": "MIT",
      "license_url": "https://opensource.org/licenses/MIT"
    },
    "auth/api-keys": {
      "keys": [
        {
          "key": "4d2c61e1-34c4-e96c-9456-15bd983c5019",
          "roles": [
            "role1",
            "role2"
          ],
          "@description": "ACME Inc."
        },
        {
          "key": "58427514-be32-0b52-b7c6-d01fada30497",
          "roles": [
            "admin",
            "user"
          ],
          "@description": "Administrators Inc."
        }
      ]
    },
    "telemetry/metrics": {
      "collection_time": "30s",
      "listen_address": ":8090"
    },
    "telemetry/influx": {
      "address": "http://influxdb:8086",
      "ttl": "25s",
      "buffer_size": 100,
      "username": "krakend-dev",
      "password": "pas5w0rd"
    },
    "telemetry/logging": {
      "level": "DEBUG",
      "prefix": "[KRAKEND]",
      "syslog": false,
      "stdout": true
    },
    "telemetry/gelf": {
      "address": "logstash:12201",
      "enable_tcp": false
    },
    "telemetry/opencensus": {
      "sample_rate": 100,
      "reporting_period": 1,
      "enabled_layers": {
        "backend": true,
        "router": true
      },
      "exporters": {
        "jaeger": {
          "endpoint": "http://jaeger:14268/api/traces",
          "service_name": "krakend"
        }
      }
    },
    "security/cors": {
      "allow_origins": ["*"],
      "allow_methods": ["POST", "GET"],
      "allow_headers": ["Origin", "Authorization", "Content-Type"],
      "expose_headers": ["Content-Length"],
      "max_age": "12h"
    },
    "auth/revoker": {
      "N": 10000000,
      "P": 0.0000001,
      "hash_name": "optimal",
      "TTL": 1500,
      "port": 1234,
      "token_keys": ["jti"]
    }
  }
}